#+title: Functional Programming in Java8
#+author: Cristobal Garcia
#+email: cristobal.garcia@obliquo.eu
#+date: 2017-05-20
#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.5.0/
#+REVEAL_THEME: beige
#+options: num:nil 
#+options: toc:nil
#+options: frag:t
#+options: reveal_title_slide:"<h1>%t</h1><h2>%a</h2>"

* Classic Java

** History

| jdk1.0    | 1995 |          |
| jdk1.1    | 1997 |          |
| jdk1.2    | 1998 | java2    |
| jdk1.3    | 2000 |          |
| j2se 1.4  | 2002 |          |

** History II

| j2se 5.0  | 2004 | Generics |
| java se 6 | 2006 |          |
| java se 7 | 2011 |          |
| java se 8 | 2014 | Lambdas  |

** OO in Java

#+begin_src java
  public interface Resource {
      void acquire();
      void close();
  }

  public class MiniFile extends Object implements Resource {
      @Override
      public void acquire(){
	  //
      }

      @Override
      public void close(){
	  //
      }
  }
    
#+end_src

** Java type system

  - null type
  - primitive types
  - array types
  - class types (generics)
  - interface types (generics)

** Sorting an array in Java7

#+begin_src java

  // Assuming existing distanceToOrigin method
  double[][] twoDim = {{1.0,2.0}, {-1.0, 0.0}, {-2.0,0.0}};

  Arrays.sort(twoDim, new Comparator<double[]>() {
      @Override
      public int compare(double[] o1, double[] o2) {
	  return distanceToOrigin(o1) - distanceToOrigin(o2);
      }
  });
#+end_src

** More occurrences 

   - Comparator (the one before)
   - Swing Listeners
   - Runnable
   - Collections
     - Guava
     - CollectionUtils

** Sorting an array in Java8

#+begin_src java
  // Assuming existing distanceToOrigin method
  double[][] twoDim = {{1.0,2.0}, {-1.0, 0.0}, {-2.0,0.0}};

  Arrays.sort(
     twoDim,
     (p, q) -> distanceToOrigin(p) - distanceToOrigin(q)
  );
#+end_src

* Java 8

  - Lambda Expressions
  - Functional interfaces
  - Streams
  - Method references
  - Default methods

* Lambda expressions and functional interfaces

** Lambda Expressions

#+begin_src java
  (Integer b, Integer b) -> a * 2 + b * 3;

  (Integer a, Integer b) -> {
      System.out.println("...");
      return a + b / 2;
  }
#+end_src

** How?

  - Functional interfaces
  - Those with *only one* abstract function
  - =@FunctionalInterface=
  - Lambdas can /appear/ where functional interfaces do
  - Type inference

** Sorting arrays: revisited

   - =sort(T[] a, Comparator<? super T> c)=
   - =Comparator<T>= is a functional interface
     - =compare(T o1, T o2)=
   - =(a,b) -> a - b= gets translated into obj
     - implements =Comparator=

** Sorting arrays: summary

#+begin_src java
  Integer[] nums = new Integer[]{8,32,1,-1,-99,43,22};

  Arrays.sort(nums, (x,y) -> x * 2 - y);

#+end_src

* Streams

** A quick detour

    - Collection: proper Collections
      - Set
      - List
      - Queue
      - ...
    - Map: they offer collection views

** Streams

   - Extend collections behaviour
   - Sequence generalization (Monadic)
     - Parallel version
   - Transform and aggregate 
   - =.stream()= / =.collect()=
   - integrated with lambdas


** Example

#+begin_src java

  List<Integer> l = Arrays.asList(new Integer[] {1,2,3,4});
  Integer m = l.stream()
      .map(i -> i * 2)
      .reduce(0, (x,y) -> x + y);
#+end_src

** Some methods

| map     | flatMap |
| filter  | limit   |
| reduce  | forEach |
| skip    | sorted  |
| from    | to      |
| collect | count   |

** More examples: forEach and flatMap

#+begin_src java
  Stream.of(1,2,3,4)
      .flatMap(x -> Stream.of(x-1,x+1))
      .forEach(x -> {
	      System.out.println(x);
	  });
  // 0, 2, 1, 3 ...
#+end_src

** More examples: collect

#+begin_src java
  List<Integer> l = Stream.of(1,2,3,4)
      .map(x -> 2*x)
      .collect(Collectors.toList());
#+end_src


* Method references

** Functions as values

   - In FP, functions are values
   - In Java: functions are objects
   - But methods are not functions
   - ... syntax sugar

** This code

#+begin_src java
  Stream.of(1,2,3,4)
	  .map(x -> Math.sqrt(x))
          .forEach(x -> {
              System.out.println(x);
          });
#+end_src

** can be sugared into

#+begin_src java
  Stream.of(1,2,3,4)
      .map(Math::sqrt)
      .forEach(System.out::println);
#+end_src

** What can be called with references?

   - static methods (=Math::sqrt=)
   - constructors (=Point::new=)
   - instance methods (=Point::getX=)
   - instance methods of an specific object (=System.out::println=)

* Default methods

** Two problems with interfaces

   - Functional interfaces require /one/ method
     - A number of existing interfaces have more than one
   - Expression problem: how to add a method to an interface?

** A solution: default methods

#+begin_src java
      interface MathVector {
          double modulus();
          default boolean isAtOrigin(){
              return modulus() == 0.0;
          }
      }
      static class MyPoint implements MathVector{
          final double x;
          final double y;
          MyPoint(double x, double y){this.x = x; this.y = y;}
          public double modulus(){return Math.sqrt(x*x + y*y);}
      }
#+end_src

** Caveats

   - Limited multiple inheritance (is this a caveat?)
   - Conflicts on default methods need to be manually resolved
   

* JavaSlang / vavr

** Intro

   - Functional data and control structures for Java8
   - Formerly javaslang. Now =vavr=
   - Terser than native java

** Setup

   - maven package: =io.vavr:vavr:0.9.0=
   - imports =io.vavr=

** Example: Lists

   #+begin_src java
     io.vavr.collection.List<Double> l = List.of(1,2,3,4,5,6,7,8)
         .map(Math::sqrt)
         .filter(x->x>1.7);
   #+end_src

** Option

   #+begin_src java
     class OptionExample {
    
         static Option<String> findUsername(Integer userId){
             if(userId == 42){
                 return Option.some("user1");
             } else {
                 return Option.none();
             }
         }
         public static void main (String... args) throws Exception {
             findUsername(42)
   	      .map(x -> x + "@example.org")
   	      .forEach(System.out::println);
         }
     }
   #+end_src

** Tuple

   #+begin_src java
     Tuple2<Double, Double> p = Tuple.of(3.0,4.0);
     List<Tuple2<Double,Double>> closeToP = List.rangeClosed(0,100)
         .map(Double::new)
         .map(x -> Tuple.of(x,x))
         .filter(x -> Math.sqrt((x._1 - p._1) * (x._1 - p._1)
   			     + (x._2 - p._2) * (x._2 - p._2))<5.0);

     closeToP.forEach(System.out::println);
   #+end_src

** Functions

   - functional interfaces =Function=
     - =apply= method
   - =Function2<Integer, String, String>=
     - takes Int, String
     - returns String

** Functions examples

   #+begin_src java
     Function1<Integer, Integer> addOne = x -> x + 1;
     Function1<Integer, Integer> byTwo = x -> x * 2;
     Function1<Integer, Integer> plusOneByTwo = byTwo.compose(addOne);
     Function1<Integer, Integer> theAnswer = Function1.constant(42);
     Function2<Integer, Integer, Option<Integer>> safeDiv = Function2.lift(div);
   #+end_src

** Try and Pattern Matching

   #+begin_src java
     import io.vavr.control.Try;
     import static io.vavr.API.*;
     import static io.vavr.Patterns.*;

     class TryExample {

         public static void main (String... args) throws Exception {
             Try<Integer> t = Try.of(()->1/1);
             String s = Match(t).of(
                     Case($Success($()), v -> "OK:" + v),
                     Case($Failure($()), e -> "FAILURE!")
             );
             System.out.println(s);

         }
     }
   #+end_src

** Concurrency: promises and futures

   #+begin_src java

     Future<Integer> f = Future.of(()->{Thread.sleep(1000); return 1;});
     System.out.println(f.map(x->x+1).get());

     Promise<Integer> p = Promise.make();
     p.future()
         .mapTry(x-> {Thread.sleep(1000); return x * 2;})
         .forEach(System.out::println);
     System.out.println("Promise made");
     p.success(32);
     System.out.println("Promise succeeded");
   #+end_src
   
